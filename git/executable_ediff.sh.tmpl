#!/usr/bin/env sh

# test args
if [ ! ${#} -ge 2 ]; then
    echo 1>&2 "Usage: ${0} LOCAL REMOTE [MERGED BASE]"
    echo 1>&2 "       (LOCAL, REMOTE, MERGED, BASE can be provided by \`git mergetool'.)"
    exit 1
fi

# tools
_EMACSCLIENT=/usr/bin/emacsclient
_BASENAME=/usr/bin/basename
_CP=/bin/cp
_MKTEMP=/bin/mktemp

# args
_LOCAL=${1}
_REMOTE=${2}
if [ "${3}" ] ; then
    _MERGED=${3}
else
    _MERGED=${_REMOTE}
fi
if [ "${4}" ] && [ -r "${4}" ] ; then
    _BASE=${4}
    _EDIFF=ediff-merge-files-with-ancestor
    _EVAL="${_EDIFF} \"${_LOCAL}\" \"${_REMOTE}\" \"${_BASE}\" nil \"${_MERGED}\""
elif [ "${_REMOTE}" = "${_MERGED}" ] ; then
    _EDIFF=ediff
    _EVAL="${_EDIFF} \"${_LOCAL}\" \"${_REMOTE}\""
else
    _EDIFF=ediff-merge-files
    _EVAL="${_EDIFF} \"${_LOCAL}\" \"${_REMOTE}\" nil \"${_MERGED}\""
fi

{{   if not (contains "-WSL2" .chezmoi.kernel.osrelease) }}
# use terminal always on wsl2. Don't call this from vterm or it will hang
# can use xdotool getactivewindow getwindowname to check if it is from emacs
if [[ $(xdotool getactivewindow getwindowname) == *macs* ]]; then
# Or this checks the command that spawned the shell. Should be emacs for vterm.
# https://askubuntu.com/questions/640096/how-do-i-check-which-terminal-i-am-using
    # It appears that this doesn't actually work with my convenience functions, since it is
    # spawned from a separate bash process and tries to use the terminal that has not window?
# if [[ $(ps -o 'cmd=' -p $(ps -o 'ppid=' -p $$)) == *macs* ]]; then
    # in emacs, make a new frame
    _EMACSCLIENTOPTS="-c"
else
    # Not in emacs.
    _EMACSCLIENTOPTS="-t"
fi
{{ else }}
_EMACSCLIENTOPTS="-c"
{{ end }}

# run emacsclient
${_EMACSCLIENT} ${_EMACSCLIENTOPTS} -a "" -e "(${_EVAL})" 2>&1

# check modified file
if [ ! "$(grep -Ec '^(<<<<<<<|=======|>>>>>>>|####### Ancestor)' "${_MERGED}")" = 0 ]; then
_MERGEDSAVE=$(${_MKTEMP} --tmpdir "$(${_BASENAME} "${_MERGED}")".XXXXXXXXXX)
${_CP} "${_MERGED}" "${_MERGEDSAVE}"
echo 1>&2 "Oops! Conflict markers detected in $_MERGED."
echo 1>&2 "Saved your changes to ${_MERGEDSAVE}"
echo 1>&2 "Exiting with code 1."
exit 1
fi

exit 0
